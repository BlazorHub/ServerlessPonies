@page "/fetchdata"
@inject IJSRuntime jsRuntime
@using Blazor.Extensions
@using Newtonsoft.Json
@using ClientApplication

<h1>SignalR test</h1>

@code {

    [Inject]
    private HttpClient _httpClient { get; set; }

    [Inject]
    private HubConnectionBuilder _hubConnectionBuilder { get; set; }

    SignalRClient client = null;

    protected override async Task OnInitializedAsync()
    {
        try
        {
         //   client = new SignalRClient("Joe", jsRuntime);
           // client.MessageReceived += MessageReceived;
            //await client.Start("http://localhost:7071/api");
        }
        catch (Exception e)
        {
            var message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }
            }

/*    protected async Task<SignalRConnectionInfo> GetSignalRConnectionInfoAsync()
    {
        var response = await _httpClient.PostAsync("http://localhost:7071/api/negotiate", null);
        response.EnsureSuccessStatusCode();
        var json = await response.Content.ReadAsStringAsync();
        return JsonConvert.DeserializeObject<SignalRConnectionInfo>(json);
    }*/

    void MessageReceived(object sender, MessageReceivedEventArgs e)
    {
        Console.WriteLine($"Blazor: receive {e.Username}: {e.Message}");
    }

    private Task Handle(object msg)
    {
        Console.WriteLine(msg);
        return Task.CompletedTask;
    }
}
