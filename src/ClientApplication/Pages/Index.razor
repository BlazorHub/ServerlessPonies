@page "/"
@using Blazor.Extensions
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using Amolenk.ServerlessPonies.Messages;
@using Amolenk.ServerlessPonies.ClientApplication.Phaser
@using Amolenk.ServerlessPonies.ClientApplication.Scenes
@inject IJSRuntime JSRuntime;
@inject HttpClient HttpClient;
@inject IServiceProvider ServiceProvider;
@inject IPhaserInterop Phaser;

<h1>@Title</h1>

<div id="phaser-container"></div>

@code {

    const string Title = "Serverless Ponies BETA 🐴";

    [Inject]
    private HubConnectionBuilder _hubConnectionBuilder { get; set; }

    SignalRClient client = null;

    PhaserGame game;

    protected override async Task OnInitializedAsync()
    {
        var playerName = "Lisa";

        try
        {
            // TODO Register with IoC
            client = new SignalRClient(JSRuntime);
            client.EventReceived += HandleEvent;
            await client.Start($"http://localhost:7071/api/signalr/{playerName}");
        }
        catch (Exception e)
        {
            var message = $"ERROR: Failed to start chat client: {e.Message}";
            Console.WriteLine(e.Message);
            Console.WriteLine(e.StackTrace);
        }

        game = new PhaserGameBuilder(Phaser, ServiceProvider)
            .WithPlayerName(playerName)
            .WithScene<BootScene>()
            .WithScene<RanchScene>()
            .WithScene<AnimalCareScene>()
            .WithScene<AnimalManagementScene>()
            .WithScene<SpinnerScene>()
            .Build();

        game.Start("phaser-container", Title);

        await new ApiClient(HttpClient).StartSinglePlayerGame(Guid.NewGuid().ToString("N"), playerName);
    }

    void HandleEvent(string eventName, string eventPayload)
    {
        // TODO Use logger
        Console.WriteLine($"Received '{eventName}' event: {eventPayload}");

        var eventTypeName = $"Amolenk.ServerlessPonies.Messages.{eventName},Messages";
        var eventType = Type.GetType(eventTypeName);

        var @event = JsonConvert.DeserializeObject(eventPayload, eventType);

        game.HandleEvent(@event);
    }
}